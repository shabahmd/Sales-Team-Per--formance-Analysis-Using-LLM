from flask import Flask, request, jsonify
import pandas as pd
from llama_index.llms.huggingface_api import HuggingFaceInferenceAPI
from pyngrok import ngrok  # Ngrok for tunneling public URLs

# Initialize Flask app
app = Flask(__name__)

# Load sales data from CSV file
sales_data = pd.read_csv('sales_data.csv')

# Initialize Hugging Face Inference API
HF_TOKEN = "<Use your Own Token Here>"
remotely_run = HuggingFaceInferenceAPI(
    model_name="HuggingFaceH4/zephyr-7b-alpha", token=HF_TOKEN
)

def query_huggingface(prompt: str) -> str:
    """
    Query the Hugging Face Inference API with a given prompt.

    Args:
        prompt (str): The prompt to send to the LLM.

    Returns:
        str: The response text generated by the model.
    """
    response = remotely_run.complete(prompt)
    return response["choices"][0]["text"]

@app.route('/api/rep_performance', methods=['GET'])
def rep_performance():
    """
    API endpoint to analyze the performance of a specific sales representative.

    Query Parameters:
        rep_id (int): The unique identifier of the sales representative.

    Returns:
        JSON: Contains the performance analysis of the sales representative.
    """
    rep_id = request.args.get('rep_id')
    if not rep_id:
        return jsonify({'error': 'rep_id is required'}), 400
    
    rep_data = sales_data[sales_data['rep_id'] == int(rep_id)]
    if rep_data.empty:
        return jsonify({'error': 'Sales representative not found'}), 404
    
    prompt = f"Analyze the performance of sales representative {rep_id}: {rep_data.to_dict(orient='records')}"
    analysis = query_huggingface(prompt)
    
    return jsonify({'rep_id': rep_id, 'analysis': analysis})

@app.route('/api/team_performance', methods=['GET'])
def team_performance():
    """
    API endpoint to provide an analysis of the overall sales team's performance.

    Returns:
        JSON: Contains the overall team performance analysis.
    """
    prompt = f"Analyze the overall performance of the sales team: {sales_data.to_dict(orient='records')}"
    analysis = query_huggingface(prompt)
    
    return jsonify({'team_performance': analysis})

@app.route('/api/performance_trends', methods=['GET'])
def performance_trends():
    """
    API endpoint to analyze sales performance trends over a specified time period.

    Query Parameters:
        time_period (str): The time period for trend analysis (e.g., 'monthly', 'quarterly').

    Returns:
        JSON: Contains the sales trends and forecast.
    """
    time_period = request.args.get('time_period', 'monthly')
    prompt = f"Analyze sales performance trends over the {time_period} period: {sales_data.to_dict(orient='records')}"
    analysis = query_huggingface(prompt)
    
    return jsonify({'time_period': time_period, 'trends': analysis})

if __name__ == '__main__':
    # Start Ngrok tunnel for public URL
    public_url = ngrok.connect(5000)
    print(f"Ngrok tunnel available at: {public_url}")
    
    # Start Flask app
    app.run(debug=True)
